Style manual for Pindel refactoring
by Eric-Wubbo Lameijer and Kai Ye
Version 0.1, February 28th 2016

If you refactor:

General guidelines for writing new classes and functions:
-try keep as many data members as possible private
-add your name and the date to any new function or class you make

We use Astyle for layout, currently with options -A3, -s3 and -j.

This means:
function and class names like:
functionname()
{
}

loops and statements like
if (a) {
} else {
}

and
while (b) {
}

For clarity, one-statement bodies of if/else statements and for
loops are also wrapped in {}.

Anyway, looking at the current code you should get an idea of 
the general style; and if you for whatever reason do not choose 
to use the current style - at least the whitespace will be 
reverted to our standards on the next run of the beautifier, 
unless you can convince us of the superior readability produced 
by your coding style preferences...

Since people work on pindel on different editors, we don't use tabs, but
spaces, one indentation level being represented by 3 spaces.

Variable names/ function names/ class names.

We use camelCase

Variable names start with lower case character:
variableName

Function and class names start with upper case character:
FunctionName
ClassName

If a variable is global, prefix g_
g_globalVariable;

If a variable is local/private to a class, prefix m_ (member)

m_memberVariable

Variables local to a function just have a regular name
variableName
